
package cs1.SecretWordApp;

import  cs1.app.*;

public class SecretWordApp
{
    void drawAlphabet( String alphabet, double radius )
    {
        double startX = radius;
        double startY = canvas.getHeight() / 4;
        
        for( int count = 0; count < alphabet.length(); count = count + 1 )
        {
            char letter = alphabet.charAt(count);
            
            if( letter == '*')
            {
                canvas.drawCircle( startX, startY, radius, "white" );
            }
            else
            {
                canvas.drawCircle( startX, startY, radius, "red" );
                canvas.drawText( startX, startY, letter, "black" );
            }
            startX = startX + 2 * radius;
        }
    }
    
    boolean hasLetter( String phrase, char letter )
    {
        for( int count = 0; count < phrase.length(); count = count + 1 )
        {
            if( phrase.charAt( count ) == letter )
            {
                return true;
            }
        }
        return false;
    }
    
    String makeBlankString( int n )
    {
        String blankString = "";
        
        for( int count = 0; count < n; count = count + 1 )
        {
            blankString = blankString + "*";
        }
        return blankString;
    }
    
    String replaceLetter( String phrase, char oldLetter, char newLetter )
    {
        String curPhrase = "";
        
        for( int count = 0; count < phrase.length(); count = count + 1 )
        {
            char letter = phrase.charAt(count);
            
            if( letter == oldLetter )
            {
                curPhrase = curPhrase + newLetter;  
            }
            else
            {
                curPhrase = curPhrase + letter;
            }
        }
        return curPhrase;
    }
    
    String revealLetter( String secretPhrase, String guessedPhrase, char letter )
    {
        String newPhrase = "";
        
        for( int count = 0; count < secretPhrase.length(); count = count + 1 )
        {
            char phraseLetter = secretPhrase.charAt(count);
            
            if( phraseLetter == letter )
            {
                newPhrase = newPhrase + letter;
            }
            else
            {
                newPhrase = newPhrase + guessedPhrase.charAt(count);
            }
        }
        return newPhrase;
    }
    
    boolean equalStrings( String str1, String str2 )
    {
        for( int count = 0; count < str1.length(); count = count + 1 )
        {
            if( str1.length() != str2.length() )
            {
                return false;
            }
            else if( str1.charAt(count) != str2.charAt(count) )
            {
                return false;
            }
        }
        return true;
    }
    
    void drawEmoji( int errors )
    {
        String filename = "errors" + errors + ".png";
        canvas.drawImage(canvas.getWidth()/2, canvas.getHeight()/2, filename);
    }
    
    void playGame()
    {
        String secretWord = "SEASHELL";
        String guessWord = makeBlankString( 8 );
        String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        double radius = 12.6;
        int attempts = 0;
        
        while( (equalStrings( secretWord, guessWord ) == false) && attempts < 6 )
        {
            canvas.clear();
            
            drawAlphabet( alphabet, radius );
            
            canvas.drawText(canvas.getWidth()/2, canvas.getHeight()/6, guessWord, "white" );
            
            canvas.sleep( 2 ) ; 
            
            char guess = canvas.readChar( "Pick a letter: " );
            
            alphabet = replaceLetter( alphabet, guess, '*' ); 
            
            if( hasLetter(secretWord, guess) == true )
            {
                guessWord = revealLetter( secretWord, guessWord, guess );
            }
            else
            {
                attempts = attempts + 1;
                drawEmoji( attempts );
            }
            
            canvas.clear();
            
            if(equalStrings( secretWord, guessWord )  == true )
            {
                canvas.drawText( canvas.getWidth()/2, canvas.getHeight()/2, " You Won! ", "white" );
            }
            else
            {
                canvas.drawText( canvas.getWidth()/2, canvas.getHeight()/2, " You Lost! ", "white" );
                drawEmoji( attempts );
            }
        }
    }
  
    public void run()
    {
        canvas.setBackground( "black" );
        canvas.setLandscape();
        
        //drawAlphabet( "AB*D*F", 35 );
        //drawAlphabet( "A**D*FGH**KLN*", 20 );
        
        //System.out.println( "Is l in hello: " + hasLetter("hello", 'l') );
        //System.out.println( "Is a in hello: " + hasLetter("hello", 'a') );
        
        //System.out.println( "String with 4 stars: " + makeBlankString( 4 ) ); 
        //System.out.println( "String with 2 stars: " + makeBlankString( 2 ) );
        //System.out.println( "String with 0 stars: " + makeBlankString( 0 ) );
        
        //System.out.println( "New phrase is: " + replaceLetter( "kelly", 'l', 'n' ) );
        //System.out.println( "New phrase is: " + replaceLetter( "abcdef", 'd', '*' ) );
        
        //System.out.println( "New phrase is: " + revealLetter( "hello", "*****", 'l' ) );
        //System.out.println( "New phrase is: " + revealLetter( "indigo", "*n***o", 'i' ) );
        //System.out.println( "New phrase is: " + revealLetter( "indigo", "*n***o", 'p' ) );
        
        //System.out.println( "Is strings same: " + equalStrings("hello", "hello") );
        //System.out.println( "Is strings same: " + equalStrings("hello", "Hello") );
        //System.out.println( "Is strings same: " + equalStrings("hello", "hi") );
        
        playGame();
    }
}

